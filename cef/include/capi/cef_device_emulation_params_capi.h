// Copyright (c) 2020 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=875b1fc7b3f877880c72dc8856388d1c041e23d7$
//

#ifndef CEF_INCLUDE_CAPI_CEF_DEVICE_EMULATION_PARAMS_CAPI_H_
#define CEF_INCLUDE_CAPI_CEF_DEVICE_EMULATION_PARAMS_CAPI_H_
#pragma once

#include "include/capi/cef_base_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
// All sizes are measured in device independent pixels.
///
typedef struct _cef_device_emulation_params_t {
  ///
  // Base structure.
  ///
  cef_base_ref_counted_t base;

  ///
  // set the screen type.
  ///
  void(CEF_CALLBACK* set_screen_type)(
      struct _cef_device_emulation_params_t* self,
      int type);

  ///
  // Emulated screen size. Typically full / physical size of the device screen
  // in DIP. Empty size means using default value: original one for kDesktop
  // screen position, equal to |view_size| for kMobile.
  ///
  void(CEF_CALLBACK* set_screen_size)(
      struct _cef_device_emulation_params_t* self,
      int width,
      int height);

  ///
  // Position of view on the screen. Missing position means using default value:
  // original one for kDesktop screen position, (0, 0) for kMobile.
  ///
  void(CEF_CALLBACK* set_view_position)(
      struct _cef_device_emulation_params_t* self,
      int x,
      int y);

  ///
  // Emulated view size. A width or height of 0 means no override in that
  // dimension, but the other can still be applied. When both are 0, then the
  // |scale| will be applied to the view instead.
  ///
  void(CEF_CALLBACK* set_view_size)(struct _cef_device_emulation_params_t* self,
                                    int width,
                                    int height);

  ///
  // If zero, the original device scale factor is preserved.
  ///
  void(CEF_CALLBACK* set_device_scale_factor)(
      struct _cef_device_emulation_params_t* self,
      float value);

  ///
  // Scale the contents of the main frame. The view's size will be scaled by
  // this number when they are not specified in |view_size|.
  ///
  void(CEF_CALLBACK* set_scale)(struct _cef_device_emulation_params_t* self,
                                float value);

  ///
  // Forced viewport offset for screenshots during emulation, (-1, -1) for
  // disabled.
  ///
  void(CEF_CALLBACK* set_viewport_offset)(
      struct _cef_device_emulation_params_t* self,
      float x,
      float y);

  ///
  // Viewport scale for screenshots during emulation, 0 for current.
  ///
  void(CEF_CALLBACK* set_viewport_scale)(
      struct _cef_device_emulation_params_t* self,
      float value);

  ///
  // Optional screen orientation type, with mojom::ScreenOrientation::kUndefined
  // value meaning no emulation necessary.
  ///
  void(CEF_CALLBACK* set_screen_orientation_type)(
      struct _cef_device_emulation_params_t* self,
      int type);

  ///
  // Screen orientation angle, used together with screenOrientationType.
  ///
  void(CEF_CALLBACK* set_screen_orientation_angle)(
      struct _cef_device_emulation_params_t* self,
      int angle);
} cef_device_emulation_params_t;

///
// create the renderer process.
///
CEF_EXPORT cef_device_emulation_params_t* cef_device_emulation_params_create();

#ifdef __cplusplus
}
#endif

#endif  // CEF_INCLUDE_CAPI_CEF_DEVICE_EMULATION_PARAMS_CAPI_H_
